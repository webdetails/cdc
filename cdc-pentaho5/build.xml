<!--===========================================================================
  This is the build file for the Community Dashboard Framework Plugin project.

  This build file will use the common_build.xml file as the default build
  process and should only override the tasks that need to differ from
  the common build file.

  See common_build.xml for more details
============================================================================-->
<project name="Community Distributed Cache" basedir="." default="jar"
         xmlns:ivy="antlib:org.apache.ivy.ant">

    <description>
    This build file is used to create the CDC project
    and works with the common_build.xml file.
    </description>

  <!-- Import the common_build.xml file which contains all the default tasks -->
    <import file="../build-res/subfloor-pkg.xml" id="subfloor"/>

  <!--
      AS STATED ABOVE, THE ONLY TASKS THAT SHOULD EXIST IN THIS BUILD FILE ARE
      THE TASKS THAT NEED TO DIFFER FROM THE DEFAULT IMPLEMENTATION OF THE TASKS
      FOUND IN common_build.xml.
    -->

 <!-- Define the Sonar task if this hasn't been done in a common script -->
    <taskdef uri="antlib:org.sonar.ant" resource="org/sonar/ant/antlib.xml">
        <classpath path="sonar-ant-task-1.3.jar" />
    </taskdef>


    <property name="plugin.name"        value="cdc"                         description="Name of the plugin"/>
    <property name="core.dir"           value="../cdc-core"                 description="Name of core dir"/>
    <property name="base.src.dir"       value="../cdc-pentaho-base/src"     description="Pentaho base src"/>
    <property name="core.src.dir"       value="../cdc-core/src"             description="Cdc core src"/>
    <property name="resource.dir"       value="resources"                   description="Name of the resource directory"/>
    <property name="core.resource.dir"  value="${core.dir}/${resource.dir}" description="Name of the core resource directory"/>
    <property name="stage.dir"          value="${bin.dir}/stage"            description="Stage directory"/>
    <property name="samples.stage.dir"  value="${bin.dir}/stage-samples"    description="Samples directory"/>
            
    <property name="hazelcast.dist.dir" value="${dist.dir}/hazelcast" description="what needs to be in hazelcast's folder"/>

    <property name="hazelcast.config.file" value="${core.resource.dir}/hazelcast.xml" description="Hazelcast config file"/>
            
    <property name="hazelcast.standalone.config.file" value="${core.resource.dir}/hazelcast-standalone.xml" description="Hazelcast secondary config file"/>
    <property name="hazelcast.standalone.dir" value="${dist.dir}/hazelcast-standalone" description="Hazelcast standalone dir"/>
            
    <property name="pentaho.lib.dir" value="${plugin.local.server.dir}/webapps/pentaho/WEB-INF/lib" description="WebAppClassLoader's lib folder"/>
            
    <property name="static.dist.dir" value="../static-dist"/>
    <property name="hazelcast.standalone.src" value="../hazelcast-standalone"/>
    <property name="runtime.lib.dir" value="runtime-lib"/>


    <tstamp/>

    <path id="classpath">
        <fileset dir="${devlib.dir}">
            <include name="**/*.jar" />
        </fileset>
        <fileset dir="${lib.dir}">
            <include name="**/*.jar" />
        </fileset>
        <fileset dir="${runtime.lib.dir}">
            <include name="**/*.jar" />
        </fileset>
    </path>


    <target name="dist" depends="clean,resolve,jar,dist-plugin"/>
    <target name="dist-compile" depends="jar,dist-plugin"/>

    <property name="plugin.artifact.id" value="${plugin.name}"/>
    <property name="plugin.zipfile" value="${plugin.artifact.id}-${project.revision}.zip"/>
    <property name="plugin.samples.zipfile" value="${plugin.artifact.id}-samples-${project.revision}.zip"/>
    <property name="plugin.solution.zipfile" value="${plugin.artifact.id}-solution-${project.revision}.zip"/>

  <!-- JARs -->
  <!-- TODO: manifests -->
  	
  <!--hazelcast -->
  
    <target name="jar-hazelcast" depends="compile,set-build.id,generate.manifest" description="Hazelcast extensions">
        <jar destfile="${hazelcast.dist.dir}/${ivy.artifact.id}-hazelcast-${project.revision}.jar" manifest="${dist.manifest.file}">
            <fileset dir="${classes.dir}" includes="pt/webdetails/cdc/hazelcast/**" />
  <!-- The following fileset is needed only as a workaround solution while BISERVER-12931 is not fixed. -->
  <!-- Once BISERVER-12931 is fixed you can remove this -->
        	<fileset dir="${classes.dir}" includes="pt/webdetails/cdc/listeners/**" />
        </jar>
        <copy todir="${hazelcast.dist.dir}">
            <fileset dir="${lib.dir}" includes="hazelcast*.jar"/>
        </copy>
    </target>
  
    <!--=======================================================================
              dist-standalone

              Create redistributable
              ====================================================================-->
    <target name="dist-standalone" depends="jar-hazelcast,jar">
    
    <!--copy dep jars-->
        <mkdir dir="${hazelcast.standalone.dir}/lib"/>
    <!-- TODO should have a more maintainable way of handling dependencies -->
        <copy todir="${hazelcast.standalone.dir}/lib">
            <fileset dir="${lib.dir}">
                <include name="cda-*.jar"/>
                <include name="commons-codec-*.jar"/>
                <include name="commons-collections-*.jar"/>
                <include name="commons-dbcp-*.jar"/>
                <include name="commons-httpclient-*.jar"/>
                <include name="commons-lang-*.jar"/>
                <include name="commons-logging-*.jar"/>
                <include name="commons-logging-api-*.jar"/>
                <include name="commons-pool-*.jar"/>
                <include name="commons-vfs-*.jar"/>
                <include name="commons-io-*.jar"/>
                <include name="eigenbase-properties-*.jar"/>
                <include name="eigenbase-resgen-*.jar"/>
                <include name="eigenbase-xom-*.jar"/>
<!--        <include name="hazelcast-*.jar"/>-->
                <include name="libbase-*.jar"/>
                <include name="json-*.jar"/>
                <include name="javacup-*.jar"/>
                <include name="log4j-*.jar"/>
                <include name="mondrian-*.jar"/>
                <include name="olap4j-*.jar"/>
                <include name="pentaho-bi-platform-api-*.jar"/>
                <include name="pentaho-bi-platform-engine-core-*.jar"/>
                <include name="pentaho-reporting-engine-classic-core-*.jar"/>
                <exclude name="pentaho-reporting-engine-classic-core-platform-plugin*.jar"/>
                <include name="xalan-*.jar"/> 
                <include name="xercesImpl-*.jar"/>
            </fileset>
            <fileset dir="${devlib.dir}">
                <include name="**/*.jar"/>
            </fileset>
        </copy>
    
        <copy todir="${hazelcast.standalone.dir}/lib">
            <fileset dir="${hazelcast.dist.dir}"/>
        </copy>
    
        <copy todir="${hazelcast.standalone.dir}/lib">
            <fileset dir="${dist.dir}" includes="*.jar"/>
        </copy>
    
        <copy todir="${hazelcast.standalone.dir}">
          <fileset dir="${hazelcast.standalone.src}"/>
        </copy>
        
        <copy file="${hazelcast.standalone.config.file}" tofile="${hazelcast.standalone.dir}/hazelcast.xml"/>    	

    </target>



  <!--=======================================================================
              dist

              Creates a distribution of this project's plugin zip
              ====================================================================-->
    <target name="assemble" depends="assemble.init,install-antcontrib, dist-plugin"/>
  
    <target name="dist-plugin" depends="jar,dist-standalone" description="Creates a distribution">

    <!-- delete and re-create the plugin dist folder tree -->
        <mkdir dir="${stage.dir}"/>
        <mkdir dir="${stage.dir}/${plugin.name}"/>
        <mkdir dir="${stage.dir}/${plugin.name}/lib"/>  

        <!-- Copy core resources -->
    <copy todir='${stage.dir}/${plugin.name}'>
        <fileset dir='${core.resource.dir}'>
            <include name="**/*"/>
        </fileset>
    </copy>
    
    <!-- copy the plugin jar to the plugin dist lib folder -->
        <copy todir="${stage.dir}/${plugin.name}/lib" overwrite="true">
            <fileset dir="${dist.dir}">
                <include name="${ivy.artifact.id}-${project.revision}.jar"/>
            </fileset>
            <fileset dir="${devlib.dir}">
                <include name="**/*.jar"/>
            </fileset>
		  <fileset dir="${runtime.lib.dir}">
			  <include name="cpf-*.jar" />
              <include name="cdc-*.jar" />
		  </fileset>

        </copy>

    <!-- zip standalone -->
        <zip basedir="${hazelcast.standalone.dir}"
         zipfile="${dist.dir}/${ivy.artifact.id}-redist-${project.revision}.zip"/>

    <!-- Copy the plugin.xml and any other files from the resource dir -->
        <copy todir="${stage.dir}/${plugin.name}" overwrite="true">
            <fileset dir="${resource.dir}">
                <include name="**/*"/>
            </fileset>
        </copy>

        <copy todir="${stage.dir}/${plugin.name}" overwrite="true">
            <fileset dir="${basedir}">
                <include name="readme.txt"/>
            </fileset>
        </copy>


        <replace file="${stage.dir}/${plugin.name}/presentation/cdcHome.cdfde" token="v.12.1.a" value="v ${project.revision}"/> 
        <replace file="${stage.dir}/${plugin.name}/presentation/cdcClusterInfo.cdfde" token="v.12.1" value="v ${project.revision}"/> 
        <replace file="${stage.dir}/${plugin.name}/presentation/cdcCacheClean.cdfde" token="v.12.1" value="v ${project.revision}"/> 
        <replace file="${stage.dir}/${plugin.name}/presentation/cdcSettings.cdfde" token="v.12.1" value="v ${project.revision}"/> 
        <replace file="${stage.dir}/${plugin.name}/static/jquery.alerts.js" token="v.12.2" value="v ${project.revision}"/> 


    <!-- create the version file -->
	<tstamp/>			
	<property name="sequential.build.id" value="manual-${DSTAMP}"/>
	<echo file="${stage.dir}/${plugin.name}/version.xml" message="&lt;version branch='TRUNK'  buildId='${sequential.build.id}'>${project.revision}&lt;/version>"/>

    <echo file="${dist.dir}/marketplace.xml">      &lt;version&gt;
        &lt;branch&gt;${project.stage}&lt;/branch&gt;
        &lt;version&gt;${project.revision}&lt;/version&gt;
        &lt;name&gt;${marketplace.metadata.name}&lt;/name&gt;
        &lt;package_url&gt;
          ${marketplace.metadata.package_url}
        &lt;/package_url&gt;
        &lt;description&gt;
          ${marketplace.metadata.description}
        &lt;/description&gt;
        &lt;build_id&gt;${sequential.build.id}&lt;/build_id&gt;
        &lt;min_parent_version&gt;${marketplace.metadata.min_parent_version}&lt;/min_parent_version&gt;
        &lt;max_parent_version&gt;${marketplace.metadata.max_parent_version}&lt;/max_parent_version&gt;
        &lt;development_stage&gt;
          &lt;lane&gt;${marketplace.metadata.development_stage.lane}&lt;/lane&gt;
          &lt;phase&gt;${marketplace.metadata.development_stage.phase}&lt;/phase&gt;
        &lt;/development_stage&gt;
      &lt;/version&gt;</echo>

        <zip destfile="${dist.dir}/${plugin.zipfile}" excludes="**/Thumbs.db">
            <zipfileset dir="${stage.dir}" includes="${plugin.name}/**/*" excludes="**/Thumbs.db"/>
            <zipfileset dir="${hazelcast.dist.dir}" prefix="${plugin.name}/pentaho-lib"/>
        </zip>

        <copy tofile="${dist.dir}/${ivy.artifact.id}-${project.revision}.zip" file="${dist.dir}/${plugin.zipfile}"/>
    </target>

  <!--=======================================================================
              dist-samples

              Creates a distribution of this project's samples
              ====================================================================-->
    <target name="dist-samples" depends="init">

        <mkdir dir="${samples.stage.dir}"/>

    <!-- copy over all the xactions within the cdf-samples folder -->
        <copy todir="${samples.stage.dir}/bi-developers" overwrite="true" >
            <fileset dir="solution/bi-developers"></fileset>
        </copy>

        <zip destfile="${dist.dir}/${plugin.samples.zipfile}"
         basedir="${samples.stage.dir}"
         includes="**/*"
         excludes="**/Thumbs.db"
        />
    </target>


  <!--=======================================================================
              install-plugin

              Installs the plugin locally
              ====================================================================-->
    <target name="install-plugin" depends="clean, jar, dist-plugin" description="Installs the plugin locally">

        <fail message="plugin.local.install.solutions.dir not set - cannot copy"
          unless="plugin.local.install.solutions.dir"/>

        <delete dir="${plugin.local.install.solutions.dir}/system/${plugin.name}"/>
        <copy todir="${plugin.local.install.solutions.dir}/system/${plugin.name}">
            <fileset dir="${stage.dir}/${plugin.name}">
                <include name="**/*"/>
            </fileset>
        </copy>

        <get src="http://127.0.0.1:8080/pentaho/Publish?publish=now&amp;class=org.pentaho.platform.plugin.services.pluginmgr.PluginAdapter&amp;userid=${plugin.local.install.user}&amp;password=${plugin.local.install.pass}"
         dest="${stage.dir}/blah.html"/>

    </target>
 
    <target name="install-all" depends="clean, resolve, dist-standalone, dist-plugin, install-hazelcast, install-plugin" description="Installs the plugin in the local biserver and copies hazelcast to the server lib dir"/>
 
    <target name="install-hazelcast" depends="resolve,jar-hazelcast" description="Installs hazelcast to the biserver lib dir">
   
        <fail message="plugin.local.server.dir not set - cannot copy"
          unless="plugin.local.server.dir"/>
   
        <echo>Delete ${pentaho.lib.dir}/hazelcast*jar</echo>
        <delete>
            <fileset dir="${pentaho.lib.dir}" includes="hazelcast*.jar"/>
        </delete>

        <echo>Delete ${pentaho.lib.dir}/cdc-hazelcast*.jar</echo>
        <delete>
            <fileset dir="${pentaho.lib.dir}" includes="cdc*hazelcast*.jar"/>
        </delete>

        <echo>Copy ${hazelcast.dist.dir}/cdc-hazelcast*.jar</echo>
        <copy toDir="${pentaho.lib.dir}">
            <fileset dir="${hazelcast.dist.dir}" includes="cdc*hazelcast*.jar"/>
        </copy>
            <copy toDir="${pentaho.lib.dir}">
            <fileset dir="${lib.dir}" includes="hazelcast*.jar"/>
        </copy>
        
    </target>

  <!--=======================================================================
          publish-pentaho-nojar (override)

          Publishes the jar and plugin zip package to the Maven repository
          ====================================================================-->
    <target name="publish-nojar"
          depends="install-antcontrib,create-pom,ivy.deliver">
    <!--ant antfile="build-res/subfloor.xml" target="publish-nojar"/-->
        <ant antfile="common_build.xml" target="publish-pentaho-nojar"/>

        <ivy:makepom ivyfile="package-ivy.xml" pomfile="plugin-pom.xml"/>
        <ivy:makepom ivyfile="package-ivy.xml" pomfile="samples-pom.xml"/>
        <ivy:makepom ivyfile="package-ivy.xml" pomfile="solution-pom.xml"/>

        <replace file="plugin-pom.xml" token="jar" value="zip"/>
        <replace file="plugin-pom.xml" token="%artifact-name%" value="${plugin.artifact.id}"/>
        <antcall target="maven-publish-artifact">
            <param name="publish.pomFile" value="plugin-pom.xml"/>
            <param name="publish.file" value="${dist.dir}/${plugin.zipfile}"/>
        </antcall>

        <antcall target="maven-publish-artifact">
            <param name="publish.pomFile" value="plugin-pom.xml"/>
            <param name="publish.file" value="${dist.dir}/${ivy.artifact.id}-${project.revision}.zip"/>
        </antcall>

        <if>
            <available file="${dist.dir}/${plugin.samples.zipfile}" />
            <then>
                <replace file="samples-pom.xml" token="jar" value="zip"/>
                <replace file="samples-pom.xml" token="%artifact-name%" value="${plugin.artifact.id}-samples"/>
                <antcall target="maven-publish-artifact">
                    <param name="publish.pomFile" value="samples-pom.xml"/>
                    <param name="publish.file" value="${dist.dir}/${plugin.samples.zipfile}"/>
                </antcall>
            </then>
        </if>
        <if>
            <available file="${dist.dir}/${plugin.solution.zipfile}" />
            <then>
                <replace file="solution-pom.xml" token="jar" value="zip"/>
                <replace file="solution-pom.xml" token="%artifact-name%" value="${plugin.artifact.id}-solution"/>
                <antcall target="maven-publish-artifact">
                    <param name="publish.pomFile" value="solution-pom.xml"/>
                    <param name="publish.file" value="${dist.dir}/${plugin.solution.zipfile}"/>
                </antcall>
            </then>
        </if>
    </target>

  <!-- Overriding resolve target so we can add resolve-dev -->
    <target name="resolve"
          depends="resolve-default, resolve-test, resolve-codegen, resolve-runtime, ivy.check-releasable"
          description="Retrieves all the dependent libraries" />
	
    <target name="resolve-runtime" depends="resolve-init">
        <ivy:resolve file="${ivyfile}" conf="runtime" />
        <ivy:retrieve conf="runtime" pattern="runtime-lib/[module]-[revision](-[classifier]).[ext]" />
    </target>
  
    <target name="resolve-sources" depends="resolve-init" unless="ivy.default.sub-configs">
        <ivy:resolve file="${ivyfile}" conf="default" />
        <ivy:retrieve conf="default" pattern="${lib.dir}/[module]-[revision](-[classifier])-[type].[ext]" type="sources" />
    </target>
  
    <target name="check-sonar-props">
        <available file="/home/tomcat/sonar.properties" property="sonar.props"/>    
        <echo>${sonar.props}</echo>
    </target>

    <target name="read-sonar-props" depends="check-sonar-props" if="sonar.props">
        <echo>Prop file exists</echo>
        <loadproperties srcFile="/home/tomcat/sonar.properties"/>
    </target>
 
    <target name="sonar" depends='read-sonar-props'>
  
    
    <!-- list of mandatories Sonar properties -->
        <property name="sonar.sources" value="${src.dir}" />
    <!-- list of optional Sonar properties -->
        <property name="sonar.binaries" value="${classes.dir}" />
        <sonar:sonar key="pt.webdetails:CDC" version="${project.revision}" xmlns:sonar="antlib:org.sonar.ant"/>

    </target>

    <target name="compile.compile" depends="init" description="Performs the actual javac compile">
    <javac destdir="${classes.dir}"
           debug="${javac.debug}"
           deprecation="${javac.deprecation}"
           fork="true"
           source="${javac.source}"
           target="${javac.target}">
        <classpath>
            <path refid="classpath"/>
        </classpath>
        <src path="${src.dir}"/>
        <src path="${base.src.dir}" />
        <src>
            <pathelement location="${core.src.dir}/pt/webdetails/cdc/hazelcast/" />
        </src>
    </javac>
  </target>




</project>
